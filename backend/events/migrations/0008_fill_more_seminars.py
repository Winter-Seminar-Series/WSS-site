# -*- coding: utf-8 -*-
# Generated by Django 1.11.26 on 2020-10-22 19:47
from __future__ import unicode_literals
from django.db import migrations


def forwards(apps, schema_editor):
    Seminar = apps.get_model('events', 'Seminar')
    WSS = apps.get_model('WSS', 'WSS')
    Speaker = apps.get_model('people', 'Speaker')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    wss = WSS.objects.get(year=2020)
    ctype = ContentType.objects.get_for_model(Seminar)

    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='Appraisal of the Network of caches',
        abstract='The growth of the Internet in both size and usage is beyond expectations. New ideas and techniques have emerged to facilitate end-users to receive seamless services. One of the significant successful solutions is caching multiple data copies in the network as a Content Delivery Network service. Content Delivery Network is an application service that redirects the clients\' requests toward a closer copy of data. A network of caches is a finer granularity service that provides a caching system at the network level. Some of the service\'s benefits are reduction in the network load, less download latency, and a means to ease mobile communications. However, searching the memory, especially when data is not available, is a waste of bandwidth and router\'s resources. Therefore, enhancing the performance of the network of caches is a challenge to overcome. \nIn this talk, we first introduce the Named Data Networking platform to enable caching capability at the network layer. Then we investigate the challenges that need to be addressed to provide caching at this level. A review of solutions will be discussed along with some experimental results and our approaches to make the network closer to the reality with enhanced performance.',
        speaker=Speaker.objects.filter(name='Mostafa Rezazad').last()
    )
    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='State-specific parcellation of the human brain',
        abstract='The goal of human brain mapping has long been to delineate the functional subunits in the brain and elucidate the functional role of each of these brain regions. Recent work has focused on whole-brain parcellation of functional Magnetic Resonance Imaging (fMRI) data to identify these subunits and create a functional atlas. Functional connectivity approaches to understand the brain at the network level, require such an atlas to assess connections between nodes and extract network properties. While no single functional atlas has emerged as the dominant atlas to date, there remains an underlying assumption that such an atlas exists. Using fMRI data from a highly sampled subject as well as two independent replication data sets, we demonstrate that functional atlases reconfigure substantially and in a meaningful manner, according to brain state.',
        speaker=Speaker.objects.filter(name='Mehraveh Salehi').last()
    )
    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='A Topological Encoding Convolutional Neural Network for Segmentation of 3D Multiphoton Images of Brain Vasculature Using Persistent Homology',
        audience='Medical Image Analysis, Computer Vision, Machine Learning',
        abstract='The clinical evidence suggests that cognitive disorders are associated with vasculature dysfunction and decreased blood flow in the brain. Hence, a functional understanding of the linkage between brain functionality and the vascular network is essential. However, methods to systematically and quantitatively describe and compare structures as complex as brain blood vessels are lacking. 3D imaging modalities such as multiphoton microscopy enables researchers to capture the network of brain vasculature with high spatial resolutions. Nonetheless, image processing and inference are some of the bottlenecks for biomedical research involving imaging, and any advancement in this area impacts many research groups. Here, we propose a topological encoding convolutional neural network based on persistent homology to segment 3D multiphoton images of brain vasculature. We demonstrate that our model outperforms state-of-the-art models in terms of the Dice coefficient and it is comparable in terms of other metrics such as sensitivity. Additionally, the topological characteristics of our model\'s segmentation results mimic manual ground truth. Our code and model are open source.',
        speaker=Speaker.objects.filter(name='Mohammad Haft-Javaheiran').last()
    )
    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='Linear-Quadratic Reinforcement Learning',
        abstract='Linear-Quadratic (LQ) models are classical for decision-making in unknown environments. In these models, state vectors of the environment evolve according to an unknown linear stochastic transition, and the reward is a quadratic function of state and action. Because of uncertainty in the state transition, Reinforcement Learning (RL) algorithms are needed to \'rapidly\' learn \'optimal\' actions. The fundamental challenge is balancing the contradictory objectives of learning and earning. That is, the trade-off between exploring to learn the unknown environment versus exploiting the available information to earn the most. We present RL algorithms with provable performance guarantees to learn accurately and earn optimally at the same time.',
        speaker=Speaker.objects.filter(name='Mohamad Kazem Shirani Faradonbeh').last()
    )
    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='Characterization of the Generalization Error of Learning Algorithms Using Jensen-Shannon Information',
        audience='Graduate Students',
        abstract='Generalization error bounds are critical to understanding the performance of machine learning models. In this presentation, we propose a new information-theoretic based generalization error upper bound applicable to supervised learning scenarios. We show that our general bound can specialize in various previous bounds. We also show that our general bound can be specialized under some conditions to a new bound involving the Jensen-Shannon information between a random variable modelling the set of training samples and another random variable modelling the set of hypotheses. We also show that our bound can be tighter than mutual information-based bounds under some conditions.',
        speaker=Speaker.objects.filter(name='Gholamali Aminian').last()
    )
    Seminar.objects.create(
        wss=wss,
        polymorphic_ctype=ctype,
        title='Alphabet of uncollateralized decentralized finance',
        abstract='Inspired by the recent boom in decentralized finance (DeFi) and the unprecedented success of flash loan projects in this ecosystem, we introduce a decentralized debt derivative named atomic bonded crosschain debt (ABCD) to bridge the gap between the growth of lending protocols on Ethereum and other UTXO-based blockchains specifically Bitcoin. We think of ABCD as the alphabet of interoperability for DeFi and as a credit infrastructure which unlike the current protocols is not limited by requiring either smart contracts, over-collateralization, or instantaneous payback.',
        speaker=Speaker.objects.filter(name='Mojtaba Tefagh').last()
    )




def rollback(apps, schema_editor):
    WSS = apps.get_model('WSS', 'WSS')
    Seminar = apps.get_model('events', 'Seminar')
    wss = WSS.objects.get(year=2020)

    titles = [
        'Appraisal of the Network of caches',
        'State-specific parcellation of the human brain',
        'A Topological Encoding Convolutional Neural Network for Segmentation of 3D Multiphoton Images of Brain Vasculature Using Persistent Homology',
        'Linear-Quadratic Reinforcement Learning',
        'Characterization of the Generalization Error of Learning Algorithms Using Jensen-Shannon Information',
        'Alphabet of uncollateralized decentralized finance',
    ]

    Seminar.objects.filter(wss=wss, title__in=titles).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0018_update_holding_team_orders'),
        ('events', '0007_add_ctype_to_seminar'),
    ]

    operations = [
        migrations.RunPython(forwards, rollback)
    ]
